{"version":3,"sources":["utils.js","Header.js","NewTransfer.js","TransferList.js","App.js","index.js"],"names":["getWallet","web3","a","eth","net","getId","networkId","deployedNetwork","Wallet","networks","Contract","abi","address","Header","approvers","quorum","join","NewTransfer","createTransfer","useState","undefined","transfer","setTransfer","updateTransfer","e","field","value","target","onSubmit","preventDefault","submit","htmlFor","id","type","onChange","TransferList","transfers","approveTransfer","currentAccount","listOfApprovals","map","amount","to","approvals","onClick","sent","App","setWeb3","accounts","setAccounts","wallet","setWallet","setApprovers","setQuorum","setTransfers","init","Promise","resolve","reject","detectEthereumProvider","provider","request","method","Web3","window","ethereum","error","methods","getApprovers","call","getTransfers","updateTransferList","send","from","transferId","connectMetamask","length","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8c64fee6.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport Wallet from './contracts1/Wallet.json';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst getWeb3 = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n        let provider = await detectEthereumProvider();\r\n        if(provider) {\r\n            await provider.request({ method: 'eth_requestAccounts' });\r\n            try {\r\n                const web3 = new Web3(window.ethereum);\r\n                resolve(web3);\r\n            } catch(error) {\r\n                reject(error);\r\n            }\r\n        } \r\n        reject('Install Metamask');\r\n    });\r\n};\r\n\r\nconst getWallet = async web3 => {\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = Wallet.networks[networkId];\r\n    return new web3.eth.Contract(\r\n        Wallet.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n    );\r\n};\r\n\r\nexport { getWeb3, getWallet };\r\n","import React from \"react\";\r\n\r\nfunction Header({approvers, quorum}) {\r\n    return (\r\n        <header>\r\n            <ul>\r\n                <li>Approvers: {approvers.join(', ')}</li>\r\n                <li>Quorum: {quorum}</li>\r\n            </ul>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, {useState} from 'react';\r\n\r\nfunction NewTransfer({createTransfer}) {\r\n    const [transfer, setTransfer] = useState(undefined);\r\n\r\n    const submit = e => {\r\n        e.preventDefault();\r\n        createTransfer(transfer)\r\n    }\r\n\r\n    const updateTransfer = (e, field) => {\r\n        const value = e.target.value;\r\n        setTransfer({...transfer, [field]: value});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create transfer</h2>\r\n            <form onSubmit={(e) => submit(e)}>\r\n                <label htmlFor='amount'>Amount</label>\r\n                <input\r\n                    id=\"amount\"\r\n                    type=\"text\"\r\n                    onChange={e => updateTransfer(e, 'amount')}\r\n                />\r\n                <label htmlFor=\"to\">To</label>\r\n                <input\r\n                    id=\"to\"\r\n                    type=\"text\"\r\n                    onChange={e => updateTransfer(e, 'to')}\r\n                />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewTransfer;","import React from 'react';\r\n\r\nfunction TransferList({transfers, approveTransfer, currentAccount, listOfApprovals}) {\r\n    return(\r\n        <div>\r\n            <h2>Transfers</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Amount</th>\r\n                        <th>To</th>\r\n                        <th>Approvals</th>\r\n                        <th>Approve</th>\r\n                        <th>Sent</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transfers.map(transfer => {\r\n                        let button;\r\n                        return (\r\n                            <tr key={transfer.id}>\r\n                                <td>{transfer.id}</td>\r\n                                <td>{transfer.amount}</td>\r\n                                <td>{transfer.to}</td>\r\n                                <td>\r\n                                    {transfer.approvals}\r\n                                </td>\r\n                                <td>\r\n                                    {button = <button onClick={() => approveTransfer(transfer.id)}>Approve</button>}\r\n                                </td>\r\n                                <td>{transfer.sent ? 'yes' : 'no'}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransferList;","import React, {useState} from 'react';\nimport {getWeb3, getWallet} from './utils.js';\nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [wallet, setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState();\n  const [transfers, setTransfers] = useState([]);\n  const [approvals, setApprovals] = useState([]);\n\n  const init = async() => {\n    const web3 = await getWeb3();\n    const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n    //const accounts = await web3.eth.getAccounts();\n    const wallet = await getWallet(web3);\n    const approvers = await wallet.methods.getApprovers().call();\n    const quorum = await wallet.methods.quorum().call();\n    const transfers = await wallet.methods.getTransfers().call();\n    //const approvals = await wallet.methods.approvals(accounts[0]).call();\n\n    setWeb3(web3);\n    setAccounts(accounts);\n    setWallet(wallet);\n    setApprovers(approvers);\n    setQuorum(quorum);\n    setTransfers(transfers);\n    //setApprovals(approvals);\n  };\n\n  // useEffect(() => {\n  //   init();\n  // }, []);\n\n  const updateTransferList = async () => {\n    const transfers = await wallet.methods.getTransfers().call();\n    setTransfers(transfers);\n  }\n\n  const createTransfer = async(transfer) => {\n    await wallet.methods\n      .createTransfer(transfer.amount, transfer.to)\n      .send({from: accounts[0]});\n    await updateTransferList();\n  }\n\n  const approveTransfer = async(transferId) => {\n    await wallet.methods\n      .approveTransfer(transferId)\n      .send({from: accounts[0]});\n    await updateTransferList();\n  }\n\n  const connectMetamask = async () => {\n    await init();\n  }\n\n  if(typeof web3 === 'undefined' || typeof accounts === 'undefined' || typeof wallet === 'undefined'\n    || approvers.length === 0 || quorum === 'undefined') {\n    return <div>\n      <button onClick={connectMetamask}>Connect metamask...</button>\n    </div>;\n  }\n\n  return (\n    <div>\n      Multisig dapp\n      <Header approvers={approvers} quorum={quorum}/>\n      <NewTransfer createTransfer={createTransfer}></NewTransfer>\n      <TransferList transfers={transfers} approveTransfer={approveTransfer} currentAccount={accounts[0]}></TransferList>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n"],"sourceRoot":""}